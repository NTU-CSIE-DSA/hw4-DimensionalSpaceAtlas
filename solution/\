#include<stdio.h>
#include<stdlib.h>
#include<assert.h>
#define MAXN 1000000


struct Node {
  struct Node *left, *right;
  int priority;
  int value;
  int size; // number of nodes in the subtree
  long long sum; // sum of nodes' values in the subtree
};

struct NodePair {
  struct Node *left, *right;
};

struct Node *sequence;

struct Node *create(int value) {
  struct Node *new_node = malloc(sizeof(struct Node));
  new_node->priority = rand();
  new_node->value = value;
  new_node->size = 1;
  new_node->sum = value;
  new_node->left = NULL;
  new_node->right = NULL;
  return new_node;
}

int order_in_subtree(struct Node *root) {
  if (root->right) return root->size - root->right->size;
  else return root->size;
  // return root->size - ((root->right)? root->right->size : 0);
}

void update(struct Node *root) {
  root->size = 1;
  root->sum = root->value;
  if (root->left) {
    root->size += root->left->size;
    root->sum += root->left->sum;
  }
  if (root->right) {
    root->size += root->right->size;
    root->sum += root->right->sum;
  }
}

struct NodePair split(struct Node *root, int k) {
  struct NodePair np;
  if (!root) {
    np.left = NULL;
    np.right = NULL;
    return np;
  }
  int order = order_in_subtree(root);
  if (order <= k) {
    np = split(root->right, k - order);
    root->right = np.left;
    update(root);
    np.left = root;
    return np;
  } else {
    np = split(root->left, k);
    root->left = np.right;
    update(root);
    np.right = root;
    return np;
  }
}

struct Node *merge(struct Node *left, struct Node *right) {
  if (!left) return right;
  if (!right) return left;
  if (left->priority > right->priority) {
    left->right = merge(left->right, right);
    update(left);
    return left;
  } else {
    right->left = merge(left, right->left);
    update(right);
    return right;
  }
}

struct Node *insert(struct Node *root, int value, int k) {
  struct Node *new_node = create(value);
  if (!root) return new_node;
  struct NodePair np = split(root, k);
  root = merge(np.left, new_node);
  root = merge(root, np.right);
  return root;
}

void traverse (struct Node *root) {
  if (!root) return;
  traverse(root->left);
  printf("%d ", root->value);
  traverse(root->right);
}

int main() {
  srand(100);
  int N;
  scanf("%d", &N);
  for (int i = 1; i <= N; i++) {
    int a;
    scanf("%d", &a);
    sequence = insert(sequence, a, i);
  }
  traverse(sequence);
  printf("\n");
	return 0;
}
